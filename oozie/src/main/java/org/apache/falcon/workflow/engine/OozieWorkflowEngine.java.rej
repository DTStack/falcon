diff a/oozie/src/main/java/org/apache/falcon/workflow/engine/OozieWorkflowEngine.java b/oozie/src/main/java/org/apache/falcon/workflow/engine/OozieWorkflowEngine.java	(rejected hunks)
@@ -637,8 +637,10 @@ public class OozieWorkflowEngine extends AbstractWorkflowEngine {
         return doJobAction(action, entity, start, end, props, lifeCycles, null);
     }
 
-    private InstancesResult doJobAction(JobAction action, Entity entity, Date start, Date end, Properties props,
-                                        List<LifeCycle> lifeCycles, Boolean allAttempts) throws FalconException {
+    //SUSPEND CHECKSTYLE CHECK ParameterNumberCheck
+    private InstancesResult doJobAction(JobAction action, Entity entity, Date start, Date end,
+                                        Properties props, List<LifeCycle> lifeCycles,
+                                        Boolean allAttempts, boolean isForced) throws FalconException {
         Map<String, List<CoordinatorAction>> actionsMap = getCoordActions(entity, start, end, lifeCycles);
         List<String> clusterList = getIncludedClusters(props, FALCON_INSTANCE_ACTION_CLUSTERS);
         List<String> sourceClusterList = getIncludedClusters(props, FALCON_INSTANCE_SOURCE_CLUSTERS);
@@ -669,7 +671,7 @@ public class OozieWorkflowEngine extends AbstractWorkflowEngine {
                 instance.sourceCluster = sourceCluster;
                 if (action.equals(JobAction.STATUS) && Boolean.TRUE.equals(allAttempts)) {
                     try {
-                        performAction(cluster, action, coordinatorAction, props, instance);
+                        performAction(cluster, action, coordinatorAction, props, instance, isForced);
                         if (instance.getRunId() > 0) {
                             instanceList = getAllInstances(cluster, coordinatorAction, nominalTimeStr);
                         } else {
@@ -687,7 +689,7 @@ public class OozieWorkflowEngine extends AbstractWorkflowEngine {
                     }
                 } else {
                     try {
-                        performAction(cluster, action, coordinatorAction, props, instance);
+                        performAction(cluster, action, coordinatorAction, props, instance, isForced);
                     } catch (FalconException e) {
                         LOG.warn("Unable to perform action {} on cluster", action, e);
                         instance.status = WorkflowStatus.ERROR;
